#summary Acceso a bases de datos desde .NET
<wiki:toc max_depth="3" />
= Links = 
  * http://www.connectionstrings.com
  * Conectarse a datos: http://msdn.microsoft.com/es-es/library/ms171886.aspx
  * http://www.scribd.com/doc/289168/Sesion-05-ADONet
=Clases principales en un proveedor de datos=
{{{
Connection
Command
DataReader
DataAdapter
}}}

= Ejemplo Postgresql =
{{{
import clr
clr.AddReference('Npgsql')
import Npgsql as pgslql

connection = pgsql.NpgsqlConnection('server=localhost; database=miBase; user id=postgres; password=1234')

connection.Open()

command = connection.CreateCommand()
command.CommandText = "insert into person (name) values ('Pepe Pérez')"
command.ExecuteNonQuery()

command.CommandText("select name from person where id = 1")
command.ExecuteScalar()

command.CommandText("select name from person")
lector = command.ExecuteReader()
lector.HasRows
lector.FieldCount

while lector.Read():
    print lector['id'], lector['name']


from System.Data import DataSet

dataset = DataSet()
adapter = pgsql.NpgsqlDataAdapter()

}}}
= Inyección de código =
Mucho cuidado con el paso de parámetros. Hay que evitar *SQL injection*.

{{{
# PROHIBIDO HACER ESTO
usuarios = ['Ana', 'María', 'Juan']
sentencia_insert = "insert into agenda (nombre) values ('%s')"
for u in usuarios:
    command.CommandText = sentencia_insert % u
    command.ExecuteNonQuery()
      

}}}
Imaginad que nos colocan como usuario {{{"); DROP TABLE presupuestos CASCADE;"}}}
== Uso de parámetros ==
Por seguridad, eficiencia, 
{{{
command = conexion.CreateCommand()
command.CommandText = 'insert into agenda (nombre) values (:nombre)'
for u in usuarios:
    command.Parameters['nombre'].Value = u
    command.ExecuteNonQuery()
}}}
= Ejemplos =
  * AdoOracle 
  * AdoMySql