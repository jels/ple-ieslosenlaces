#summary Primeros pasos django

<wiki:toc />

Basado en el tutorial de Jeff Hui en http://www.bestechvideos.com/2009/04/05/nettuts-diving-into-django y http://blog.jeffhui.net/2009/03/django-blog-tutorial/ .

= Creación del proyecto =
{{{
django-admin.py startproject <nombre_del_proyecto>
}}}
Esto crea la siguiente estructura en el nuevo directorio:
{{{
__init__.py
manage.py
urls.py
settings.py
}}}
=Configuración de la base de datos=
Para sqlite3 usamos:
{{{
DATABASE_ENGINE = 'sqlite3'
DATABASE_NAME = 'ruta_completa_del_archivo'  
}}}
Como las rutas tienen que ser absolutas podemos crear/usar la siguente función:
{{{
import os
def ruta(archivo):
    return os.path.join(os.path.abspath(os.path.dirname(__file__)), archivo)
}}}
= Media =
{{{
MEDIA_ROOT = ruta('media')
MEDIA_URL = '/recursos/'
TEMPLATE_DIRS = (ruta('templates'),)
}}}
= Comprobación =
{{{
python manage.py runserver
}}}
Lanza la aplicación por defecto en {{{localhost 8000}}}
= Crear primera aplicación =
Dentro del directorio del proyecto
{{{
python manage.py startapp <nombre_proyecto>
}}}
Activamos el nuevo proyecto en {{{settings.py}}}:
{{{
INSTALLED_APPS = (
     .......
    'blog',
)
}}}
= Creación de los modelos =
Editamos proyecto/models.py:
{{{
class Mensaje(models.Model):
    autor = models.ForeignKey(User)
    titulo = models.CharField(max_length=120)
    cuerpo = models.TextField()
    fech_pub = models.DateTimeField(auto_now_add=True)
    def __unicode__(self):
        return self.titulo
}}}
Para ver el sql que se va a crear:
{{{
python manage.py sql
}}}
Para crear la estructura en la BD:
{{{
python manage.py syncdb
}}}

= Django admin =
Aplicación [http://es.wikipedia.org/wiki/CRUD CRUD] automática sobre el diseño de nuestro modelo.
== Instalar admin ==
Añadir en {{{settings.py}}}
{{{
INSTALLED_APPS = (
    ...
    'django.contrib.admin',
    ...
}}}
Añadir la url a {{{urls.py}}}
{{{
from django.contrib import admin
admin.autodiscover()

urlpatterns = patterns('',
    (r'^admin/', include(admin.site.urls)),
)
}}}
Creación de {{{admin.py}}} dentro de la aplicación que queremos administrar:
{{{
from django.contrib import admin
from models import Mensaje

# Clase que voy a administrar
admin.site.register(Mensaje)
}}}

== Adaptando el formato de admin ==
{{{
from django.contrib import admin
from models import Mensaje
class MensajeAdmin(admin.ModelAdmin):
    fields = ('titulo', 'cuerpo')
    list_display = ('titulo', 'autor', 'fech_pub')
    date_hierarchy = 'fech_pub'
admin.site.register(Mensaje, MensajeAdmin)
}}}
  * *fields* restringe los campos en los formularios para añadir/editar. También se puede usar *exclude*
  * *list_display* especifica qué campos (o métodos) se muestran en el listado de mensajes. Si nos especifica, se muestra el {{{__unicode__}}} del modelo.
  *  *date_hierarchy* permite ver los detalles de una campo fecha.
Añadirmos el autor de forma automática cuando se crea un nuevo mensaje (no cuando se modifica).
{{{
def save_model(self, request, obj, form, change):
    if not change:
        obj.autor = request.user
    obj.save()
}}}
=== Modificacmos encabezados de listados ===
En {{{blog/models.py}}}:
{{{
    fech_pub = models.DateTimeField(u'Fecha publicación', auto_now_add=True)
    fech_mod = models.DateTimeField(u'Fecha modificación', auto_now=True) 
}}}